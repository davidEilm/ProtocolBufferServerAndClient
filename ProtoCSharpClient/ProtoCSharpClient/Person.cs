// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Person.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Main {

  /// <summary>Holder for reflection information generated from Person.proto</summary>
  public static partial class PersonReflection {

    #region Descriptor
    /// <summary>File descriptor for Person.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PersonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxQZXJzb24ucHJvdG8SBG1haW4ilwIKBlBlcnNvbhIKCgJpZBgBIAEoBRIR",
            "CglmaXJzdG5hbWUYAiABKAkSEAoIbGFzdG5hbWUYAyABKAkSDQoFZW1haWwY",
            "BCABKAkSDAoEY2l0eRgFIAEoCRIMCgRpYmFuGAYgASgJEgwKBHRpbWUYByAB",
            "KAkSDQoFdGl0bGUYCCABKAkSEQoJc2hpcnRzaXplGAkgASgJEhIKCnBvc3Rh",
            "bENvZGUYCiABKAUSEQoJbWFjQWRyZXNzGAsgASgJEhAKCGxhdGl0dWRlGAwg",
            "ASgCEhAKCGpvYlRpdGxlGA0gASgJEhAKCGN1cnJlbmN5GA4gASgJEg8KB2Nv",
            "dW50cnkYDyABKAkSEwoLY291bnRyeUNvZGUYECABKAliBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Main.Person), global::Main.Person.Parser, new[]{ "Id", "Firstname", "Lastname", "Email", "City", "Iban", "Time", "Title", "Shirtsize", "PostalCode", "MacAdress", "Latitude", "JobTitle", "Currency", "Country", "CountryCode" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Person : pb::IMessage<Person> {
    private static readonly pb::MessageParser<Person> _parser = new pb::MessageParser<Person>(() => new Person());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Person> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Main.PersonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Person() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Person(Person other) : this() {
      id_ = other.id_;
      firstname_ = other.firstname_;
      lastname_ = other.lastname_;
      email_ = other.email_;
      city_ = other.city_;
      iban_ = other.iban_;
      time_ = other.time_;
      title_ = other.title_;
      shirtsize_ = other.shirtsize_;
      postalCode_ = other.postalCode_;
      macAdress_ = other.macAdress_;
      latitude_ = other.latitude_;
      jobTitle_ = other.jobTitle_;
      currency_ = other.currency_;
      country_ = other.country_;
      countryCode_ = other.countryCode_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Person Clone() {
      return new Person(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "firstname" field.</summary>
    public const int FirstnameFieldNumber = 2;
    private string firstname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Firstname {
      get { return firstname_; }
      set {
        firstname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "lastname" field.</summary>
    public const int LastnameFieldNumber = 3;
    private string lastname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Lastname {
      get { return lastname_; }
      set {
        lastname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "email" field.</summary>
    public const int EmailFieldNumber = 4;
    private string email_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "city" field.</summary>
    public const int CityFieldNumber = 5;
    private string city_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string City {
      get { return city_; }
      set {
        city_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "iban" field.</summary>
    public const int IbanFieldNumber = 6;
    private string iban_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Iban {
      get { return iban_; }
      set {
        iban_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 7;
    private string time_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Time {
      get { return time_; }
      set {
        time_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "title" field.</summary>
    public const int TitleFieldNumber = 8;
    private string title_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shirtsize" field.</summary>
    public const int ShirtsizeFieldNumber = 9;
    private string shirtsize_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Shirtsize {
      get { return shirtsize_; }
      set {
        shirtsize_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "postalCode" field.</summary>
    public const int PostalCodeFieldNumber = 10;
    private int postalCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PostalCode {
      get { return postalCode_; }
      set {
        postalCode_ = value;
      }
    }

    /// <summary>Field number for the "macAdress" field.</summary>
    public const int MacAdressFieldNumber = 11;
    private string macAdress_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MacAdress {
      get { return macAdress_; }
      set {
        macAdress_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latitude" field.</summary>
    public const int LatitudeFieldNumber = 12;
    private float latitude_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Latitude {
      get { return latitude_; }
      set {
        latitude_ = value;
      }
    }

    /// <summary>Field number for the "jobTitle" field.</summary>
    public const int JobTitleFieldNumber = 13;
    private string jobTitle_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string JobTitle {
      get { return jobTitle_; }
      set {
        jobTitle_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "currency" field.</summary>
    public const int CurrencyFieldNumber = 14;
    private string currency_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Currency {
      get { return currency_; }
      set {
        currency_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "country" field.</summary>
    public const int CountryFieldNumber = 15;
    private string country_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country {
      get { return country_; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "countryCode" field.</summary>
    public const int CountryCodeFieldNumber = 16;
    private string countryCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CountryCode {
      get { return countryCode_; }
      set {
        countryCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Person);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Person other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Firstname != other.Firstname) return false;
      if (Lastname != other.Lastname) return false;
      if (Email != other.Email) return false;
      if (City != other.City) return false;
      if (Iban != other.Iban) return false;
      if (Time != other.Time) return false;
      if (Title != other.Title) return false;
      if (Shirtsize != other.Shirtsize) return false;
      if (PostalCode != other.PostalCode) return false;
      if (MacAdress != other.MacAdress) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
      if (JobTitle != other.JobTitle) return false;
      if (Currency != other.Currency) return false;
      if (Country != other.Country) return false;
      if (CountryCode != other.CountryCode) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Firstname.Length != 0) hash ^= Firstname.GetHashCode();
      if (Lastname.Length != 0) hash ^= Lastname.GetHashCode();
      if (Email.Length != 0) hash ^= Email.GetHashCode();
      if (City.Length != 0) hash ^= City.GetHashCode();
      if (Iban.Length != 0) hash ^= Iban.GetHashCode();
      if (Time.Length != 0) hash ^= Time.GetHashCode();
      if (Title.Length != 0) hash ^= Title.GetHashCode();
      if (Shirtsize.Length != 0) hash ^= Shirtsize.GetHashCode();
      if (PostalCode != 0) hash ^= PostalCode.GetHashCode();
      if (MacAdress.Length != 0) hash ^= MacAdress.GetHashCode();
      if (Latitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Latitude);
      if (JobTitle.Length != 0) hash ^= JobTitle.GetHashCode();
      if (Currency.Length != 0) hash ^= Currency.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (CountryCode.Length != 0) hash ^= CountryCode.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Firstname.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Firstname);
      }
      if (Lastname.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Lastname);
      }
      if (Email.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Email);
      }
      if (City.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(City);
      }
      if (Iban.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Iban);
      }
      if (Time.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Time);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Title);
      }
      if (Shirtsize.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(Shirtsize);
      }
      if (PostalCode != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(PostalCode);
      }
      if (MacAdress.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(MacAdress);
      }
      if (Latitude != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(Latitude);
      }
      if (JobTitle.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(JobTitle);
      }
      if (Currency.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Currency);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Country);
      }
      if (CountryCode.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(CountryCode);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Firstname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Firstname);
      }
      if (Lastname.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Lastname);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (City.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(City);
      }
      if (Iban.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Iban);
      }
      if (Time.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Shirtsize.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Shirtsize);
      }
      if (PostalCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PostalCode);
      }
      if (MacAdress.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MacAdress);
      }
      if (Latitude != 0F) {
        size += 1 + 4;
      }
      if (JobTitle.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(JobTitle);
      }
      if (Currency.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Currency);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (CountryCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CountryCode);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Person other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Firstname.Length != 0) {
        Firstname = other.Firstname;
      }
      if (other.Lastname.Length != 0) {
        Lastname = other.Lastname;
      }
      if (other.Email.Length != 0) {
        Email = other.Email;
      }
      if (other.City.Length != 0) {
        City = other.City;
      }
      if (other.Iban.Length != 0) {
        Iban = other.Iban;
      }
      if (other.Time.Length != 0) {
        Time = other.Time;
      }
      if (other.Title.Length != 0) {
        Title = other.Title;
      }
      if (other.Shirtsize.Length != 0) {
        Shirtsize = other.Shirtsize;
      }
      if (other.PostalCode != 0) {
        PostalCode = other.PostalCode;
      }
      if (other.MacAdress.Length != 0) {
        MacAdress = other.MacAdress;
      }
      if (other.Latitude != 0F) {
        Latitude = other.Latitude;
      }
      if (other.JobTitle.Length != 0) {
        JobTitle = other.JobTitle;
      }
      if (other.Currency.Length != 0) {
        Currency = other.Currency;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      if (other.CountryCode.Length != 0) {
        CountryCode = other.CountryCode;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Firstname = input.ReadString();
            break;
          }
          case 26: {
            Lastname = input.ReadString();
            break;
          }
          case 34: {
            Email = input.ReadString();
            break;
          }
          case 42: {
            City = input.ReadString();
            break;
          }
          case 50: {
            Iban = input.ReadString();
            break;
          }
          case 58: {
            Time = input.ReadString();
            break;
          }
          case 66: {
            Title = input.ReadString();
            break;
          }
          case 74: {
            Shirtsize = input.ReadString();
            break;
          }
          case 80: {
            PostalCode = input.ReadInt32();
            break;
          }
          case 90: {
            MacAdress = input.ReadString();
            break;
          }
          case 101: {
            Latitude = input.ReadFloat();
            break;
          }
          case 106: {
            JobTitle = input.ReadString();
            break;
          }
          case 114: {
            Currency = input.ReadString();
            break;
          }
          case 122: {
            Country = input.ReadString();
            break;
          }
          case 130: {
            CountryCode = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
